
==================== FINAL INTERFACE ====================
2017-01-01 18:53:54.814906 UTC

interface main@main:Main 8001
  interface hash: bd04283cd8866419d2d1b1fbfe72f6b9
  ABI hash: 1882531b4d0edde705b7b511621934ab
  export-list hash: f2e341a7791bf5b9bfcaeec4cb1b0b31
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 078472ac564f599d590c91e1e6093604
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.greet
  Main.main
  Main.sample
  Main.Sample{Main.Sample hello quiet repeat}
module dependencies:
package dependencies: ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-LVnipygDrAR1FEMFhjxcQX
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ
                      process-1.4.2.0@process-1.4.2.0
                      transformers-0.5.2.0@transformers-0.5.2.0 unix-2.7.2.0@unix-2.7.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.Monoid 1efae021212a10c79fd75960dc0a1d99
import  -/  base-4.9.0.0:Data.Semigroup 056371ce789bdfe8de829d3c46741740
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative 031c88d485c50b485154c1052ead17f6
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative.Builder 3a6eae459efd37ad249a0debb46d23c8
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative.Extra 0631fb19461b4d86718462c74fa1f864
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative.Types 036a614c38cc82a70634cd11ce8cd86f
1fbe32a419134e4f251c268e6ee41781
  $tc'Sample :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12012198788252051396##
                   3631027791257342165##
                   Main.$trModule
                   Main.$tc'Sample1) -}
ab2ae46b5703bc44c24c06b3bc7fc75a
  $tc'Sample1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sample"#) -}
b1064ae229eeb09bb740be31663c1638
  $tcSample :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2235662672429984762##
                   12204291928396398509##
                   Main.$trModule
                   Main.$tcSample1) -}
d224b3efde0f839081a47653ff48f999
  $tcSample1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Sample"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
1b719730e1b6448cab4145c477bc1fd8
  $wgreet ::
    GHC.Base.String
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><S,1*U><L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Types.Bool)
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ww1 of wild {
                   GHC.Types.False
                   -> case ww2 of ww3 { GHC.Types.I# ww4 ->
                      let {
                        lvl2 :: [GHC.Types.Char]
                        = GHC.CString.unpackAppendCString# "Hello, "# ww
                      } in
                      letrec {
                        $wloop :: GHC.Prim.Int#
                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
                        = \ (ww5 :: GHC.Prim.Int#)
                            (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# ww5 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.IO.Handle.Text.hPutStr2
                                      GHC.IO.Handle.FD.stdout
                                      lvl2
                                      GHC.Types.True
                                      w2 of ds1 { (#,#) ipv ipv1 ->
                               $wloop (GHC.Prim.-# ww5 1#) ipv }
                            GHC.Types.True -> (# w2, GHC.Tuple.() #) }
                      } in
                      $wloop ww4 w }
                   GHC.Types.True -> (# w, GHC.Tuple.() #) }) -}
9eda0338180b276fefd0381be98ec811
  data Sample
    = Sample {hello :: GHC.Base.String,
              quiet :: GHC.Types.Bool,
              repeat :: GHC.Types.Int}
b7b1594d3e8deb430d0d6bc04dd96d47
  greet :: Main.Sample -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(U,1*U,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.greet1
                  `cast`
                (<Main.Sample>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3da39d236893f1d6e45bab5e20dbe5d7
  greet1 ::
    Main.Sample
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(U,1*U,1*U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Sample)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Sample ww1 ww2 ww3 ->
                 Main.$wgreet ww1 ww2 ww3 w1 }) -}
df487d57e13099d69d8d36de7339dace
  hello :: Main.Sample -> GHC.Base.String
  RecSel Left Main.Sample
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Sample) ->
                 case ds of wild { Main.Sample ds1 ds2 ds3 -> ds1 }) -}
9a4ec7d37a0ff106ccf6c9942d47eea9
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2abcf41283153996d7d69bd54f7cc199
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds { (#,#) ipv ipv1 ->
                 case Options.Applicative.Extra.customExecParser2
                        @ Main.Sample
                        (Options.Applicative.Extra.execParserPure
                           @ Main.Sample
                           Options.Applicative.Builder.defaultPrefs
                           Main.main2
                           ipv1)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 Main.greet1 ipv3 ipv2 } }) -}
cd6d0d9c68d9fcd1f2aa82bd5ffd596e
  main2 :: Options.Applicative.Types.ParserInfo Main.Sample
  {- Unfolding: (Options.Applicative.Types.ParserInfo
                   @ Main.Sample
                   Main.main7
                   GHC.Types.True
                   Main.main5
                   Main.main3
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Options.Applicative.Builder.info1
                   GHC.Types.True) -}
7bc75e0711d23358c0ee06f97f9a9aee
  main3 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Main.main4) -}
a8a373811ea76d88da1de67941a2f8a2
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "hello - a test for optparse-applicative"#) -}
2dca2f1020da7ffb3575261ea8b29e49
  main5 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Main.main6) -}
24e5ef8d01f4b89093c5d3706875e9d4
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Print a greeting for TARGET"#) -}
b6f52dd254d5d4f213c954e3b3f4ad94
  main7 :: Options.Applicative.Types.Parser Main.Sample
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Main.Sample
                   @ Main.Sample
                   (Options.Applicative.Extra.helper @ Main.Sample)
                   Main.sample) -}
e8906a871c980d99265caa33715c6bc7
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
5341b4097cb5bad5ccaec738d151db0a
  quiet :: Main.Sample -> GHC.Types.Bool
  RecSel Left Main.Sample
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Sample) ->
                 case ds of wild { Main.Sample ds1 ds2 ds3 -> ds2 }) -}
dfd269ba58141cda1c3ff846b15a927c
  repeat :: Main.Sample -> GHC.Types.Int
  RecSel Left Main.Sample
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Sample) ->
                 case ds of wild { Main.Sample ds1 ds2 ds3 -> ds3 }) -}
ada3ff967eebdf44a3f5e48f3c8c3ee5
  sample :: Options.Applicative.Types.Parser Main.Sample
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Main.Sample
                   @ GHC.Types.Int
                   Main.sample16
                   Main.sample1) -}
aa0abc4e901bf752f5e280e79105eb31
  sample1 :: Options.Applicative.Types.Parser GHC.Types.Int
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Types.Int
                   Main.sample5
                   Main.sample2) -}
a6f8163f6e223f1512fe37f4710cf27d
  sample10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Repeats for greeting"#) -}
17174a4a29e8c98062d975f3b8467e86
  sample11 :: Options.Applicative.Types.OptReader GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ GHC.Types.Int
                   Main.sample14
                   Main.sample12
                   Options.Applicative.Builder.abortOption3) -}
a00ef9a8120d807a0ed35ea861462c23
  sample12 :: Options.Applicative.Types.CReader GHC.Types.Int
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ GHC.Types.Int
                   Options.Applicative.Types.$fMonoidCompleter4
                     `cast`
                   (Trans
                        (<GHC.Base.String>_R
                         ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R))
                        (Sym (Options.Applicative.Types.N:Completer[0])))
                   Main.sample13
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GHC.Base.String>_R
                                  <Control.Monad.Trans.Except.Except
                                     Options.Applicative.Types.ParseError>_R
                                  <GHC.Types.Int>_N))
                        (Sym (Options.Applicative.Types.N:ReadM[0]) <GHC.Types.Int>_N))) -}
495bf7b35e4f5bfc6674d333f316064a
  sample13 ::
    GHC.Base.String
    -> Control.Monad.Trans.Except.Except
         Options.Applicative.Types.ParseError GHC.Types.Int
  {- Arity: 1,
     Unfolding: (Options.Applicative.Builder.auto1
                   @ GHC.Types.Int
                   GHC.Read.$fReadInt) -}
4f84d7b0940f4115bef23e6618758800
  sample14 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Main.sample_n
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
ffb1a39a0e6b0e5b843a6a6fd39394f7
  sample15 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "repeat"#) -}
cd782ac167e78c1246ad3c8e3c79a5ac
  sample16 ::
    Options.Applicative.Types.Parser (GHC.Types.Int -> Main.Sample)
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ (GHC.Types.Int -> Main.Sample)
                   @ GHC.Types.Bool
                   Main.sample29
                   Main.sample17) -}
0b5d31c68c7b74709fe4915c3e891c46
  sample17 :: Options.Applicative.Types.Parser GHC.Types.Bool
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Types.Bool
                   Main.sample20
                   Main.sample18) -}
a08502b534fa644c4514f3b3b8dfcab7
  sample18 :: Options.Applicative.Types.Parser GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ GHC.Types.Bool
                   Main.sample19) -}
4da72791ff64305582c6336feecd1f2a
  sample19 :: GHC.Base.Maybe GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Bool GHC.Types.False) -}
cae2e1d38bad3e144e76ad41eed01dd6
  sample2 :: Options.Applicative.Types.Parser GHC.Types.Int
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ GHC.Types.Int
                   Main.sample3) -}
8fffa4771921baffc8ff8f50f74e5293
  sample20 :: Options.Applicative.Types.Parser GHC.Types.Bool
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Types.Bool
                   Main.sample21
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Types.Bool)) -}
2677e3f78dad045f5de20757923830db
  sample21 :: Options.Applicative.Types.Parser GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Types.Bool
                   Main.sample22) -}
33c46dce9e809559bd5520749efca9a8
  sample22 :: Options.Applicative.Types.Option GHC.Types.Bool
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Types.Bool
                   Main.sample25
                   Main.sample23) -}
3bb35594cce81f71e9770128c19cb5b9
  sample23 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Main.sample_lvl1
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
571801a9c3a9bb9e7db0ec989cdfdc0c
  sample24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Whether to be quiet"#) -}
17f3a81ada9a8dcd0fdb860672a7685e
  sample25 :: Options.Applicative.Types.OptReader GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.FlagReader
                   @ GHC.Types.Bool
                   Main.sample26
                   GHC.Types.True) -}
85fdcc4eef3365c8f3a06a49f470ca73
  sample26 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Main.sample_n2
                   Main.sample27) -}
b87a6cc13792017cfa4976dc2f8c8ab0
  sample27 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Main.sample_n1
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
802fe37f3e52025022fd3bb8f67b5fb2
  sample28 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "quiet"#) -}
da66d0bdc7438f248c3c202602c76bdd
  sample29 ::
    Options.Applicative.Types.Parser
      (GHC.Types.Bool -> GHC.Types.Int -> Main.Sample)
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ GHC.Base.String
                   @ (GHC.Types.Bool -> GHC.Types.Int -> Main.Sample)
                   Main.Sample
                   Main.sample30) -}
7138d3a1ab2856fdc98919ee0ca32893
  sample3 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Int Main.sample4) -}
12eea9cfd5b52a1696408beb3783f393
  sample30 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Base.String
                   Main.sample31
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Base.String)) -}
04c1cddc5178dffc4d1fad0db8ccdc81
  sample31 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Base.String
                   Main.sample32) -}
a96460d12259f621714d6ff16f1fe1a9
  sample32 :: Options.Applicative.Types.Option GHC.Base.String
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Base.String
                   Main.sample35
                   Main.sample33) -}
85351ff4ffb4d512a9989bea26f289b2
  sample33 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Main.sample_lvl3
                   Main.sample_var1
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
7f322a380ed34a5ca2da980274e8be85
  sample34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Target for the greeting"#) -}
59609a7ffa1a9100f8f4b37b5228b6f4
  sample35 :: Options.Applicative.Types.OptReader GHC.Base.String
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ GHC.Base.String
                   Main.sample37
                   Main.sample36
                   Options.Applicative.Builder.abortOption3) -}
9ea6455a9a4e2f89cec9a3b683dfd2c4
  sample36 :: Options.Applicative.Types.CReader GHC.Base.String
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ GHC.Base.String
                   Options.Applicative.Types.$fMonoidCompleter4
                     `cast`
                   (Trans
                        (<GHC.Base.String>_R
                         ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R))
                        (Sym (Options.Applicative.Types.N:Completer[0])))
                   (Data.Either.Right
                      @ Options.Applicative.Types.ParseError
                      @ GHC.Base.String)
                     `cast`
                   (Trans
                        (<GHC.Base.String>_R
                         ->_R Trans
                                  (Sym (Data.Functor.Identity.N:Identity[0]
                                            <Data.Either.Either
                                               Options.Applicative.Types.ParseError
                                               GHC.Base.String>_R))
                                  (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Options.Applicative.Types.ParseError>_N
                                            <Data.Functor.Identity.Identity>_R
                                            <GHC.Base.String>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <GHC.Base.String>_R
                                       <Control.Monad.Trans.Except.Except
                                          Options.Applicative.Types.ParseError>_R
                                       <GHC.Base.String>_N))
                             (Sym (Options.Applicative.Types.N:ReadM[0]) <GHC.Base.String>_N)))) -}
6fb4faa00339d85b6d783c6c01d219d2
  sample37 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Main.sample_n3
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
f8112704dda69bfecf524ca4565a5f78
  sample38 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "hello"#) -}
4e0a758dfb3b3fa9ff352c98961e9363
  sample4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
00ecde5c3495d31016f88469e934cbec
  sample5 :: Options.Applicative.Types.Parser GHC.Types.Int
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Types.Int
                   Main.sample6) -}
575a7ffbf91850ff7d4488b08a14cd65
  sample6 :: Options.Applicative.Types.Option GHC.Types.Int
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Types.Int
                   Main.sample11
                   Main.sample7) -}
b7eae945ce707cd54b0848420c367a42
  sample7 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Main.sample_lvl2
                   Main.sample_var
                   Main.sample8) -}
fd8f840a2f53b1c2133194b520ece408
  sample8 :: GHC.Base.Maybe GHC.Base.String
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Base.String Main.sample9) -}
995e863d83a31bb97040459bdf333c9b
  sample9 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        1#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
5852f12825b64b4d7add2d64fef004cd
  sample_lvl1 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Main.sample24) -}
ae81471390b4946df67b3c4d51adbfe8
  sample_lvl2 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Main.sample10) -}
9167f9c49a67a1d21afd57f64f375266
  sample_lvl3 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Doc
  {- Unfolding: (Data.OldList.wordsFB
                   @ (Options.Applicative.Help.Chunk.Chunk
                        Text.PrettyPrint.ANSI.Leijen.Doc)
                   Options.Applicative.Help.Chunk.paragraph1
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Main.sample34) -}
8c1fe21f4ffd26773646e2c52e8ca932
  sample_n :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong Main.sample15) -}
737fbd25a11ec500180604c3859b0776
  sample_n1 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong Main.sample28) -}
4e1e6e812a642453b8d7a5002027aef6
  sample_n2 :: Options.Applicative.Types.OptName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptShort 'q'#) -}
d92465f4c6dab78c0a2ddb71f17a04fd
  sample_n3 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong Main.sample38) -}
46125c1e2db1abe272cfcc1e8e8bc6f4
  sample_var :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "INT"#) -}
53092d52b7bc15d1af959f045c7a8808
  sample_var1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "TARGET"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

