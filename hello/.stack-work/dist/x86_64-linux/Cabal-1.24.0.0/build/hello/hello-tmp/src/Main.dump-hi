
==================== FINAL INTERFACE ====================
2016-10-07 20:47:18.496444 UTC

interface main@main:Main 8001
  interface hash: fe6da927cec8117062741a9c070aebba
  ABI hash: 89a74395302740ee2ffe89dcf77dd029
  export-list hash: 983d8ace4e8688c9f7aece813cdd8ef0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 78824f220c36982e04b7c66f787b8b1f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.isPal
  Main.isWord
  Main.main
  Main.nonEmpty
  Main.pal'
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
ae55312172e134647da3a15b8f09aeb7
  isPal :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: GHC.Base.String) ->
                 GHC.Base.eqString
                   xs
                   (GHC.List.reverse1
                      @ GHC.Types.Char
                      xs
                      (GHC.Types.[] @ GHC.Types.Char))) -}
f6815297bc3d06700719d81ea9e5af95
  isWord :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Main.isWord1
                  `cast`
                (<GHC.Base.String>_R ->_R Data.Monoid.N:All[0]) -}
bc2b122b67899d3cc7777f29382fe971
  isWord1 :: GHC.Base.String -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) -> Main.isWord_go xs) -}
ec7348157257b844fe2feed9250f9b5f
  isWord_go :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8ac2fbbcf328fee896edf20e658ba35e
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
fc5801455e88379ffe8fdb2c905aaa96
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Base.eqString
                        ipv1
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False
                   -> let {
                        word' :: GHC.Base.String = Main.pal' ipv1
                      } in
                      case (Main.isWord_go word')
                             `cast`
                           (Data.Monoid.N:All[0]) of wild1 {
                        GHC.Types.False
                        -> GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main3
                             GHC.Types.True
                             ipv
                        GHC.Types.True
                        -> GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (case GHC.Base.eqString
                                     word'
                                     (GHC.List.reverse1
                                        @ GHC.Types.Char
                                        word'
                                        (GHC.Types.[] @ GHC.Types.Char)) of wild2 {
                                GHC.Types.False -> GHC.Show.shows21
                                GHC.Types.True -> GHC.Show.shows20 })
                             GHC.Types.True
                             ipv }
                   GHC.Types.True
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main2
                        GHC.Types.True
                        ipv } }) -}
212fa335e170b0c6bd2e6a1e45073e4d
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Please enter a word."#) -}
738586ca9aa30eef025da9192048c9d9
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This is not a word."#) -}
ddc8cd8bef6762e3e5b5054b3522484a
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
0e195d7d11ff9967eaa20082f8916e17
  nonEmpty :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: GHC.Base.String) ->
                 case GHC.Base.eqString xs (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False -> GHC.Base.Just @ GHC.Base.String xs
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Base.String }) -}
1d4472aa65f64ff3872525df77b7a61a
  pal' :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 Data.OldList.wordsFB
                   @ [GHC.Types.Char]
                   Main.pal'1
                   (GHC.Types.[] @ GHC.Types.Char)
                   xs) -}
ca895c08311e72d7752272d57fd8edae
  pal'1 :: [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: [GHC.Types.Char])
                   (y :: [GHC.Types.Char])[OneShot] ->
                 letrec {
                   go :: [GHC.Types.Char] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> y
                       : y1 ys
                       -> GHC.Types.: @ GHC.Types.Char (GHC.Unicode.toLower y1) (go ys) }
                 } in
                 go x) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

